
MY first project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000d6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b5  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000839  00000000  00000000  0000259d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d97  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083d  00000000  00000000  000041db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00004a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2c 03 	call	0x658	; 0x658 <main>
  74:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
uint8_t mode,premode;

void APP_init(void)
{
	// initialize normal mode
	mode = 1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
	premode = 0;
  82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	// car led initialize
	LED_init(CAR_PORT,CAR_GREEN_PIN);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	81 e4       	ldi	r24, 0x41	; 65
  8a:	0e 94 9b 02 	call	0x536	; 0x536 <LED_init>
	LED_init(CAR_PORT,CAR_YELLOW_PIN);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	0e 94 9b 02 	call	0x536	; 0x536 <LED_init>
	LED_init(CAR_PORT,CAR_RED_PIN);
  96:	62 e0       	ldi	r22, 0x02	; 2
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 9b 02 	call	0x536	; 0x536 <LED_init>
	
	//ped led initialize
	LED_init(PED_PORT,PED_GREEN_PIN);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	82 e4       	ldi	r24, 0x42	; 66
  a2:	0e 94 9b 02 	call	0x536	; 0x536 <LED_init>
	LED_init(PED_PORT,PED_YELLOW_PIN);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	0e 94 9b 02 	call	0x536	; 0x536 <LED_init>
	LED_init(PED_PORT,PED_RED_PIN);
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	82 e4       	ldi	r24, 0x42	; 66
  b2:	0e 94 9b 02 	call	0x536	; 0x536 <LED_init>
	
	// button initialize
	BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	0e 94 97 02 	call	0x52e	; 0x52e <BUTTON_init>
	
	//timer initialize
	TIMER_init();
  be:	0e 94 aa 02 	call	0x554	; 0x554 <TIMER_init>
	
	// interrupt initialize
	sei();
  c2:	78 94       	sei
	RISING_EDGE();
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	85 bf       	out	0x35, r24	; 53
	EXT_INT();	
  ca:	8b b7       	in	r24, 0x3b	; 59
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8b bf       	out	0x3b, r24	; 59
  d0:	08 95       	ret

000000d2 <APP_start>:
}

void APP_start(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	// case 1 (car led red)
	for(int i =0 ;i < 20;i++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	5b c0       	rjmp	.+182    	; 0x192 <APP_start+0xc0>
	{
		if(premode)
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	88 23       	and	r24, r24
  e2:	29 f1       	breq	.+74     	; 0x12e <APP_start+0x5c>
  e4:	0e c0       	rjmp	.+28     	; 0x102 <APP_start+0x30>
		{
				for(int i =0;i<20;i++)
				{
					LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
					LED_toggle(PED_PORT,PED_YELLOW_PIN);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	82 e4       	ldi	r24, 0x42	; 66
  f2:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
					TIMER_delay(250);
  f6:	8a ef       	ldi	r24, 0xFA	; 250
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
	// case 1 (car led red)
	for(int i =0 ;i < 20;i++)
	{
		if(premode)
		{
				for(int i =0;i<20;i++)
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	02 c0       	rjmp	.+4      	; 0x106 <APP_start+0x34>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	c4 31       	cpi	r28, 0x14	; 20
 108:	d1 05       	cpc	r29, r1
 10a:	6c f3       	brlt	.-38     	; 0xe6 <APP_start+0x14>
				{
					LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
					LED_toggle(PED_PORT,PED_YELLOW_PIN);
					TIMER_delay(250);
				}
				LED_on(PED_PORT,PED_RED_PIN);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	82 e4       	ldi	r24, 0x42	; 66
 110:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
				LED_on(CAR_PORT,CAR_GREEN_PIN);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
				TIMER_delay(5000);
 11c:	88 e8       	ldi	r24, 0x88	; 136
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
				premode = 0;
 124:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		else
		{
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
			LED_off(PED_PORT,PED_YELLOW_PIN);
			LED_off(PED_PORT,CAR_RED_PIN);
			for(int i =0;i<20;i++)
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	b6 c0       	rjmp	.+364    	; 0x29a <APP_start+0x1c8>
				LED_on(CAR_PORT,CAR_GREEN_PIN);
				TIMER_delay(5000);
				premode = 0;
				break;
		}
		else if(mode)
 12e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 132:	88 23       	and	r24, r24
 134:	a1 f0       	breq	.+40     	; 0x15e <APP_start+0x8c>
		{
			LED_on(PED_PORT,PED_RED_PIN);
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	82 e4       	ldi	r24, 0x42	; 66
 13a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_off(CAR_PORT,CAR_GREEN_PIN);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(CAR_PORT,CAR_RED_PIN);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(250);
 14e:	8a ef       	ldi	r24, 0xFA	; 250
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			premode = 0;
 156:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}

void APP_start(void)
{
	// case 1 (car led red)
	for(int i =0 ;i < 20;i++)
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	1a c0       	rjmp	.+52     	; 0x192 <APP_start+0xc0>
			TIMER_delay(250);
			premode = 0;
		}
		else
		{
			LED_on(CAR_PORT,CAR_RED_PIN);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_off(PED_PORT,PED_RED_PIN);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	82 e4       	ldi	r24, 0x42	; 66
 16a:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(PED_PORT,PED_GREEN_PIN);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	82 e4       	ldi	r24, 0x42	; 66
 172:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(5000);
 176:	88 e8       	ldi	r24, 0x88	; 136
 178:	93 e1       	ldi	r25, 0x13	; 19
 17a:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			LED_off(PED_PORT,PED_GREEN_PIN);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	82 e4       	ldi	r24, 0x42	; 66
 182:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			mode = 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
			premode = 1;
 18c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 190:	cb cf       	rjmp	.-106    	; 0x128 <APP_start+0x56>
}

void APP_start(void)
{
	// case 1 (car led red)
	for(int i =0 ;i < 20;i++)
 192:	c4 31       	cpi	r28, 0x14	; 20
 194:	d1 05       	cpc	r29, r1
 196:	0c f4       	brge	.+2      	; 0x19a <APP_start+0xc8>
 198:	a1 cf       	rjmp	.-190    	; 0xdc <APP_start+0xa>
 19a:	c6 cf       	rjmp	.-116    	; 0x128 <APP_start+0x56>
	}
	
	//  case 2( yellow blink)
	for(int i =0 ;i < 20;i++)
	{
		if(premode)
 19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a0:	88 23       	and	r24, r24
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <APP_start+0x10a>
		{
			LED_off(CAR_PORT,CAR_RED_PIN);
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			for(int i =0;i<20;i++)
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <APP_start+0xfa>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 1c2:	8a ef       	ldi	r24, 0xFA	; 250
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
	for(int i =0 ;i < 20;i++)
	{
		if(premode)
		{
			LED_off(CAR_PORT,CAR_RED_PIN);
			for(int i =0;i<20;i++)
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	c4 31       	cpi	r28, 0x14	; 20
 1ce:	d1 05       	cpc	r29, r1
 1d0:	84 f3       	brlt	.-32     	; 0x1b2 <APP_start+0xe0>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
				TIMER_delay(250);
			}
			premode = 0;
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		{
			LED_off(PED_PORT,PED_RED_PIN);
			LED_off(CAR_PORT,CAR_GREEN_PIN);
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
			LED_off(PED_PORT,PED_YELLOW_PIN);
			for(int i =0;i<20;i++)
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	f4 c0       	rjmp	.+488    	; 0x3c4 <APP_start+0x2f2>
				TIMER_delay(250);
			}
			premode = 0;
			break;
		}
		else if(mode)
 1dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 1e0:	88 23       	and	r24, r24
 1e2:	b1 f0       	breq	.+44     	; 0x210 <APP_start+0x13e>
		{
			LED_on(PED_PORT,PED_RED_PIN);
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	82 e4       	ldi	r24, 0x42	; 66
 1e8:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_off(CAR_PORT,CAR_RED_PIN);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	82 e4       	ldi	r24, 0x42	; 66
 1f8:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
			TIMER_delay(250);
 204:	8a ef       	ldi	r24, 0xFA	; 250
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			break;
		}
	}
	
	//  case 2( yellow blink)
	for(int i =0 ;i < 20;i++)
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	45 c0       	rjmp	.+138    	; 0x29a <APP_start+0x1c8>
			LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
			TIMER_delay(250);
		}
		else
		{
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	82 e4       	ldi	r24, 0x42	; 66
 21c:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,CAR_RED_PIN);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	82 e4       	ldi	r24, 0x42	; 66
 224:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			for(int i =0;i<20;i++)
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	0d c0       	rjmp	.+26     	; 0x248 <APP_start+0x176>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	82 e4       	ldi	r24, 0x42	; 66
 23a:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 23e:	8a ef       	ldi	r24, 0xFA	; 250
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
		else
		{
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
			LED_off(PED_PORT,PED_YELLOW_PIN);
			LED_off(PED_PORT,CAR_RED_PIN);
			for(int i =0;i<20;i++)
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	c4 31       	cpi	r28, 0x14	; 20
 24a:	d1 05       	cpc	r29, r1
 24c:	84 f3       	brlt	.-32     	; 0x22e <APP_start+0x15c>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
				TIMER_delay(250);
			}
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	81 e4       	ldi	r24, 0x41	; 65
 252:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_RED_PIN);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	82 e4       	ldi	r24, 0x42	; 66
 262:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(PED_PORT,PED_GREEN_PIN);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	82 e4       	ldi	r24, 0x42	; 66
 26a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_on(CAR_PORT,CAR_RED_PIN);
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	81 e4       	ldi	r24, 0x41	; 65
 272:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(5000);
 276:	88 e8       	ldi	r24, 0x88	; 136
 278:	93 e1       	ldi	r25, 0x13	; 19
 27a:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			LED_off(PED_PORT,PED_GREEN_PIN);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	82 e4       	ldi	r24, 0x42	; 66
 282:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_RED_PIN);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			mode = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
			premode = 1;
 294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 298:	9e cf       	rjmp	.-196    	; 0x1d6 <APP_start+0x104>
			break;
		}
	}
	
	//  case 2( yellow blink)
	for(int i =0 ;i < 20;i++)
 29a:	c4 31       	cpi	r28, 0x14	; 20
 29c:	d1 05       	cpc	r29, r1
 29e:	0c f4       	brge	.+2      	; 0x2a2 <APP_start+0x1d0>
 2a0:	7d cf       	rjmp	.-262    	; 0x19c <APP_start+0xca>
 2a2:	99 cf       	rjmp	.-206    	; 0x1d6 <APP_start+0x104>
	}
	
	// case 3 (green)
	for(int i =0;i<20;i++)
	{
		if(premode)
 2a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a8:	88 23       	and	r24, r24
 2aa:	29 f1       	breq	.+74     	; 0x2f6 <APP_start+0x224>
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <APP_start+0x1f8>
		{
			
			for(int i =0;i<20;i++)
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 2be:	8a ef       	ldi	r24, 0xFA	; 250
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
	for(int i =0;i<20;i++)
	{
		if(premode)
		{
			
			for(int i =0;i<20;i++)
 2c6:	21 96       	adiw	r28, 0x01	; 1
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <APP_start+0x1fc>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	c4 31       	cpi	r28, 0x14	; 20
 2d0:	d1 05       	cpc	r29, r1
 2d2:	6c f3       	brlt	.-38     	; 0x2ae <APP_start+0x1dc>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
				TIMER_delay(250);
			}
			LED_on(PED_PORT,PED_RED_PIN);
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	82 e4       	ldi	r24, 0x42	; 66
 2d8:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_on(CAR_PORT,CAR_GREEN_PIN);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e4       	ldi	r24, 0x41	; 65
 2e0:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(5000);
 2e4:	88 e8       	ldi	r24, 0x88	; 136
 2e6:	93 e1       	ldi	r25, 0x13	; 19
 2e8:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			premode = 0;
 2ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		{
			LED_off(PED_PORT,PED_RED_PIN);
			LED_off(CAR_PORT,CAR_GREEN_PIN);
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
			LED_off(PED_PORT,PED_YELLOW_PIN);
			for(int i =0;i<20;i++)
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	09 c1       	rjmp	.+530    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
			LED_on(CAR_PORT,CAR_GREEN_PIN);
			TIMER_delay(5000);
			premode = 0;
			break;
		}
		else if(mode)
 2f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 2fa:	88 23       	and	r24, r24
 2fc:	b1 f0       	breq	.+44     	; 0x32a <APP_start+0x258>
		{
			LED_on(PED_PORT,PED_RED_PIN);
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	82 e4       	ldi	r24, 0x42	; 66
 302:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_off(CAR_PORT,CAR_RED_PIN);
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	81 e4       	ldi	r24, 0x41	; 65
 30a:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e4       	ldi	r24, 0x41	; 65
 312:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(CAR_PORT,CAR_GREEN_PIN);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	81 e4       	ldi	r24, 0x41	; 65
 31a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(250);
 31e:	8a ef       	ldi	r24, 0xFA	; 250
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			break;
		}
	}
	
	// case 3 (green)
	for(int i =0;i<20;i++)
 326:	21 96       	adiw	r28, 0x01	; 1
 328:	4d c0       	rjmp	.+154    	; 0x3c4 <APP_start+0x2f2>
			LED_on(CAR_PORT,CAR_GREEN_PIN);
			TIMER_delay(250);
		}
		else
		{
			LED_off(PED_PORT,PED_RED_PIN);
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	82 e4       	ldi	r24, 0x42	; 66
 32e:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_GREEN_PIN);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	81 e4       	ldi	r24, 0x41	; 65
 336:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	81 e4       	ldi	r24, 0x41	; 65
 33e:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			for(int i =0;i<20;i++)
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	0d c0       	rjmp	.+26     	; 0x36a <APP_start+0x298>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	81 e4       	ldi	r24, 0x41	; 65
 354:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	82 e4       	ldi	r24, 0x42	; 66
 35c:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 360:	8a ef       	ldi	r24, 0xFA	; 250
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
		{
			LED_off(PED_PORT,PED_RED_PIN);
			LED_off(CAR_PORT,CAR_GREEN_PIN);
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
			LED_off(PED_PORT,PED_YELLOW_PIN);
			for(int i =0;i<20;i++)
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	c4 31       	cpi	r28, 0x14	; 20
 36c:	d1 05       	cpc	r29, r1
 36e:	84 f3       	brlt	.-32     	; 0x350 <APP_start+0x27e>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
				TIMER_delay(250);
			}
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e4       	ldi	r24, 0x41	; 65
 374:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	82 e4       	ldi	r24, 0x42	; 66
 37c:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_RED_PIN);
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	82 e4       	ldi	r24, 0x42	; 66
 384:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_GREEN_PIN);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	81 e4       	ldi	r24, 0x41	; 65
 38c:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(CAR_PORT,CAR_RED_PIN);
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_on(PED_PORT,PED_GREEN_PIN);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	82 e4       	ldi	r24, 0x42	; 66
 39c:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(5000);
 3a0:	88 e8       	ldi	r24, 0x88	; 136
 3a2:	93 e1       	ldi	r25, 0x13	; 19
 3a4:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			LED_off(CAR_PORT,CAR_RED_PIN);
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	81 e4       	ldi	r24, 0x41	; 65
 3ac:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_GREEN_PIN);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	82 e4       	ldi	r24, 0x42	; 66
 3b4:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			mode = 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
			premode = 1;
 3be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 3c2:	96 cf       	rjmp	.-212    	; 0x2f0 <APP_start+0x21e>
			break;
		}
	}
	
	// case 3 (green)
	for(int i =0;i<20;i++)
 3c4:	c4 31       	cpi	r28, 0x14	; 20
 3c6:	d1 05       	cpc	r29, r1
 3c8:	0c f4       	brge	.+2      	; 0x3cc <APP_start+0x2fa>
 3ca:	6c cf       	rjmp	.-296    	; 0x2a4 <APP_start+0x1d2>
 3cc:	91 cf       	rjmp	.-222    	; 0x2f0 <APP_start+0x21e>
		}
	}
	// last toggle
	for(int i =0;i<20;i++)
	{
		if(premode)
 3ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d2:	88 23       	and	r24, r24
 3d4:	d1 f1       	breq	.+116    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <APP_start+0x322>
		{
			for(int i =0;i<20;i++)
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 3e8:	8a ef       	ldi	r24, 0xFA	; 250
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
	// last toggle
	for(int i =0;i<20;i++)
	{
		if(premode)
		{
			for(int i =0;i<20;i++)
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <APP_start+0x326>
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	c4 31       	cpi	r28, 0x14	; 20
 3fa:	d1 05       	cpc	r29, r1
 3fc:	6c f3       	brlt	.-38     	; 0x3d8 <APP_start+0x306>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
				TIMER_delay(250);
			}
			LED_off(PED_PORT,PED_GREEN_PIN);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	82 e4       	ldi	r24, 0x42	; 66
 402:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(PED_PORT,PED_RED_PIN);
 406:	62 e0       	ldi	r22, 0x02	; 2
 408:	82 e4       	ldi	r24, 0x42	; 66
 40a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_on(CAR_PORT,CAR_GREEN_PIN);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	81 e4       	ldi	r24, 0x41	; 65
 412:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(5000);
 416:	88 e8       	ldi	r24, 0x88	; 136
 418:	93 e1       	ldi	r25, 0x13	; 19
 41a:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			LED_off(CAR_PORT,CAR_GREEN_PIN);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	81 e4       	ldi	r24, 0x41	; 65
 422:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			for(int i =0;i<20;i++)
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	09 c0       	rjmp	.+18     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	81 e4       	ldi	r24, 0x41	; 65
 430:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 434:	8a ef       	ldi	r24, 0xFA	; 250
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			LED_off(PED_PORT,PED_GREEN_PIN);
			LED_on(PED_PORT,PED_RED_PIN);
			LED_on(CAR_PORT,CAR_GREEN_PIN);
			TIMER_delay(5000);
			LED_off(CAR_PORT,CAR_GREEN_PIN);
			for(int i =0;i<20;i++)
 43c:	21 96       	adiw	r28, 0x01	; 1
 43e:	c4 31       	cpi	r28, 0x14	; 20
 440:	d1 05       	cpc	r29, r1
 442:	a4 f3       	brlt	.-24     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				TIMER_delay(250);
			}
			premode = 0;
 444:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 448:	63 c0       	rjmp	.+198    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
		}
		else if(mode)
 44a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 44e:	88 23       	and	r24, r24
 450:	91 f0       	breq	.+36     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		{
			LED_on(PED_PORT,PED_RED_PIN);
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	82 e4       	ldi	r24, 0x42	; 66
 456:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_off(CAR_PORT,CAR_GREEN_PIN);
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	81 e4       	ldi	r24, 0x41	; 65
 45e:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	81 e4       	ldi	r24, 0x41	; 65
 466:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
			TIMER_delay(250);
 46a:	8a ef       	ldi	r24, 0xFA	; 250
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			premode = 1;
			break;
		}
	}
	// last toggle
	for(int i =0;i<20;i++)
 472:	21 96       	adiw	r28, 0x01	; 1
 474:	49 c0       	rjmp	.+146    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
			LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
			TIMER_delay(250);
		}
		else
		{
			LED_off(PED_PORT,PED_RED_PIN);
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	82 e4       	ldi	r24, 0x42	; 66
 47a:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_GREEN_PIN);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e4       	ldi	r24, 0x41	; 65
 482:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	81 e4       	ldi	r24, 0x41	; 65
 48a:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	82 e4       	ldi	r24, 0x42	; 66
 492:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			for(int i =0;i<20;i++)
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d0 e0       	ldi	r29, 0x00	; 0
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	81 e4       	ldi	r24, 0x41	; 65
 4a0:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	82 e4       	ldi	r24, 0x42	; 66
 4a8:	0e 94 a7 02 	call	0x54e	; 0x54e <LED_toggle>
				TIMER_delay(250);
 4ac:	8a ef       	ldi	r24, 0xFA	; 250
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
		{
			LED_off(PED_PORT,PED_RED_PIN);
			LED_off(CAR_PORT,CAR_GREEN_PIN);
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
			LED_off(PED_PORT,PED_YELLOW_PIN);
			for(int i =0;i<20;i++)
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	c4 31       	cpi	r28, 0x14	; 20
 4b8:	d1 05       	cpc	r29, r1
 4ba:	84 f3       	brlt	.-32     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			{
				LED_toggle(CAR_PORT,CAR_YELLOW_PIN);
				LED_toggle(PED_PORT,PED_YELLOW_PIN);
				TIMER_delay(250);
			}
			LED_off(PED_PORT,PED_RED_PIN);
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	82 e4       	ldi	r24, 0x42	; 66
 4c0:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_YELLOW_PIN);
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	81 e4       	ldi	r24, 0x41	; 65
 4c8:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(PED_PORT,PED_YELLOW_PIN);
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	82 e4       	ldi	r24, 0x42	; 66
 4d0:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_on(PED_PORT,PED_GREEN_PIN);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	82 e4       	ldi	r24, 0x42	; 66
 4d8:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			LED_on(CAR_PORT,CAR_RED_PIN);
 4dc:	62 e0       	ldi	r22, 0x02	; 2
 4de:	81 e4       	ldi	r24, 0x41	; 65
 4e0:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_on>
			TIMER_delay(5000);
 4e4:	88 e8       	ldi	r24, 0x88	; 136
 4e6:	93 e1       	ldi	r25, 0x13	; 19
 4e8:	0e 94 ac 02 	call	0x558	; 0x558 <TIMER_delay>
			LED_off(PED_PORT,PED_GREEN_PIN);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	82 e4       	ldi	r24, 0x42	; 66
 4f0:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			LED_off(CAR_PORT,CAR_RED_PIN);
 4f4:	62 e0       	ldi	r22, 0x02	; 2
 4f6:	81 e4       	ldi	r24, 0x41	; 65
 4f8:	0e 94 a3 02 	call	0x546	; 0x546 <LED_off>
			mode=1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
			premode = 1;
 502:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 506:	04 c0       	rjmp	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
			premode = 1;
			break;
		}
	}
	// last toggle
	for(int i =0;i<20;i++)
 508:	c4 31       	cpi	r28, 0x14	; 20
 50a:	d1 05       	cpc	r29, r1
 50c:	0c f4       	brge	.+2      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 50e:	5f cf       	rjmp	.-322    	; 0x3ce <APP_start+0x2fc>
			premode = 1;
			break;
			}
		
	}
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <__vector_1>:
ISR(EXT_INT_0)
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
	mode = 0;
 520:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <mode>
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <BUTTON_init>:
#include "button.h"

//BUTTON_init calls DIO_init and initializes the pin as input
void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	DIO_init(buttonPort,buttonPin,IN);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	0e 94 31 03 	call	0x662	; 0x662 <DIO_init>
 534:	08 95       	ret

00000536 <LED_init>:
#include "led.h"

//LED_init calls DIO_init and initializes the led pin into output
void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	0e 94 31 03 	call	0x662	; 0x662 <DIO_init>
 53c:	08 95       	ret

0000053e <LED_on>:
}
//LED_on calls DIO_write and initializes the led into high (5v)
void LED_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HIGH);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_write>
 544:	08 95       	ret

00000546 <LED_off>:
}
//LED_off calls DIO_write and initializes the led into low (0v)
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LOW);
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_write>
 54c:	08 95       	ret

0000054e <LED_toggle>:
}
//LED_toggle calls DIO_toggle and switches the value of the led
void LED_toggle(uint8_t ledPort,uint8_t ledPin)
{
	DIO_toggle(ledPort,ledPin);
 54e:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_toggle>
 552:	08 95       	ret

00000554 <TIMER_init>:
#include "../../Util/bitmanipulation.h"

//initializes the timer into normal mode
void TIMER_init()
{
	TCCR0 = 0x00;
 554:	13 be       	out	0x33, r1	; 51
 556:	08 95       	ret

00000558 <TIMER_delay>:
}
void TIMER_delay(uint16_t ms)
{
 558:	8f 92       	push	r8
 55a:	9f 92       	push	r9
 55c:	af 92       	push	r10
 55e:	bf 92       	push	r11
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	ec 01       	movw	r28, r24
	uint16_t Numberofoverflows, initialtimer;
	double TimerMAXdelay, TimerTick;
	uint32_t overflowcounter = 0;
	TimerTick = 256.0/1000.0; // timertick = prescaler (256) / clock frequency (1 mhz)
	TimerMAXdelay = TimerTick * 256;
	if(ms < TimerMAXdelay)
 56e:	bc 01       	movw	r22, r24
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
 578:	6b 01       	movw	r12, r22
 57a:	7c 01       	movw	r14, r24
 57c:	2f e6       	ldi	r18, 0x6F	; 111
 57e:	32 e1       	ldi	r19, 0x12	; 18
 580:	43 e8       	ldi	r20, 0x83	; 131
 582:	52 e4       	ldi	r21, 0x42	; 66
 584:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__cmpsf2>
 588:	88 23       	and	r24, r24
 58a:	9c f4       	brge	.+38     	; 0x5b2 <TIMER_delay+0x5a>
	{
			initialtimer = (TimerMAXdelay-ms)/TimerTick;
 58c:	a7 01       	movw	r20, r14
 58e:	96 01       	movw	r18, r12
 590:	6f e6       	ldi	r22, 0x6F	; 111
 592:	72 e1       	ldi	r23, 0x12	; 18
 594:	83 e8       	ldi	r24, 0x83	; 131
 596:	92 e4       	ldi	r25, 0x42	; 66
 598:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__subsf3>
 59c:	2f e6       	ldi	r18, 0x6F	; 111
 59e:	32 e1       	ldi	r19, 0x12	; 18
 5a0:	43 e8       	ldi	r20, 0x83	; 131
 5a2:	5e e3       	ldi	r21, 0x3E	; 62
 5a4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>
 5a8:	0e 94 57 05 	call	0xaae	; 0xaae <__fixunssfsi>
			Numberofoverflows = 1;
 5ac:	c1 e0       	ldi	r28, 0x01	; 1
 5ae:	d0 e0       	ldi	r29, 0x00	; 0
 5b0:	35 c0       	rjmp	.+106    	; 0x61c <TIMER_delay+0xc4>
	}
	else if(ms == (int)TimerMAXdelay)
 5b2:	c1 34       	cpi	r28, 0x41	; 65
 5b4:	d1 05       	cpc	r29, r1
 5b6:	79 f1       	breq	.+94     	; 0x616 <TIMER_delay+0xbe>
		initialtimer = 0;
		Numberofoverflows = 1;
	}
	else
	{
			Numberofoverflows = ceil((double)ms/TimerMAXdelay);
 5b8:	2f e6       	ldi	r18, 0x6F	; 111
 5ba:	32 e1       	ldi	r19, 0x12	; 18
 5bc:	43 e8       	ldi	r20, 0x83	; 131
 5be:	52 e4       	ldi	r21, 0x42	; 66
 5c0:	c7 01       	movw	r24, r14
 5c2:	b6 01       	movw	r22, r12
 5c4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>
 5c8:	0e 94 c9 04 	call	0x992	; 0x992 <ceil>
 5cc:	0e 94 57 05 	call	0xaae	; 0xaae <__fixunssfsi>
 5d0:	4b 01       	movw	r8, r22
 5d2:	5c 01       	movw	r10, r24
 5d4:	eb 01       	movw	r28, r22
			initialtimer = (1<<8) - ((double)ms/TimerTick)/Numberofoverflows;
 5d6:	2f e6       	ldi	r18, 0x6F	; 111
 5d8:	32 e1       	ldi	r19, 0x12	; 18
 5da:	43 e8       	ldi	r20, 0x83	; 131
 5dc:	5e e3       	ldi	r21, 0x3E	; 62
 5de:	c7 01       	movw	r24, r14
 5e0:	b6 01       	movw	r22, r12
 5e2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>
 5e6:	6b 01       	movw	r12, r22
 5e8:	7c 01       	movw	r14, r24
 5ea:	b4 01       	movw	r22, r8
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
 5f4:	9b 01       	movw	r18, r22
 5f6:	ac 01       	movw	r20, r24
 5f8:	c7 01       	movw	r24, r14
 5fa:	b6 01       	movw	r22, r12
 5fc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__divsf3>
 600:	9b 01       	movw	r18, r22
 602:	ac 01       	movw	r20, r24
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	80 e8       	ldi	r24, 0x80	; 128
 60a:	93 e4       	ldi	r25, 0x43	; 67
 60c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__subsf3>
 610:	0e 94 57 05 	call	0xaae	; 0xaae <__fixunssfsi>
 614:	03 c0       	rjmp	.+6      	; 0x61c <TIMER_delay+0xc4>
			initialtimer = (TimerMAXdelay-ms)/TimerTick;
			Numberofoverflows = 1;
	}
	else if(ms == (int)TimerMAXdelay)
	{
		initialtimer = 0;
 616:	60 e0       	ldi	r22, 0x00	; 0
		Numberofoverflows = 1;
 618:	c1 e0       	ldi	r28, 0x01	; 1
 61a:	d0 e0       	ldi	r29, 0x00	; 0
	else
	{
			Numberofoverflows = ceil((double)ms/TimerMAXdelay);
			initialtimer = (1<<8) - ((double)ms/TimerTick)/Numberofoverflows;
	}
	TCNT0 = initialtimer;
 61c:	62 bf       	out	0x32, r22	; 50
	SET_BIT(TCCR0,2); // 256 prescaler
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	84 60       	ori	r24, 0x04	; 4
 622:	83 bf       	out	0x33, r24	; 51
}
void TIMER_delay(uint16_t ms)
{
	uint16_t Numberofoverflows, initialtimer;
	double TimerMAXdelay, TimerTick;
	uint32_t overflowcounter = 0;
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	30 e0       	ldi	r19, 0x00	; 0
			Numberofoverflows = ceil((double)ms/TimerMAXdelay);
			initialtimer = (1<<8) - ((double)ms/TimerTick)/Numberofoverflows;
	}
	TCNT0 = initialtimer;
	SET_BIT(TCCR0,2); // 256 prescaler
	while(overflowcounter < Numberofoverflows)
 628:	08 c0       	rjmp	.+16     	; 0x63a <TIMER_delay+0xe2>
	{
		/* will be repeated
		stop after one overflow -> 256 micro sec
		wait until overflow flag to be set */
		while(READ_BIT(TIFR,0)==0);
 62a:	08 b6       	in	r0, 0x38	; 56
 62c:	00 fe       	sbrs	r0, 0
 62e:	fd cf       	rjmp	.-6      	; 0x62a <TIMER_delay+0xd2>
		//clear overflow flag
		SET_BIT(TIFR,0);
 630:	88 b7       	in	r24, 0x38	; 56
 632:	81 60       	ori	r24, 0x01	; 1
 634:	88 bf       	out	0x38, r24	; 56
		overflowcounter++;
 636:	2f 5f       	subi	r18, 0xFF	; 255
 638:	3f 4f       	sbci	r19, 0xFF	; 255
			Numberofoverflows = ceil((double)ms/TimerMAXdelay);
			initialtimer = (1<<8) - ((double)ms/TimerTick)/Numberofoverflows;
	}
	TCNT0 = initialtimer;
	SET_BIT(TCCR0,2); // 256 prescaler
	while(overflowcounter < Numberofoverflows)
 63a:	2c 17       	cp	r18, r28
 63c:	3d 07       	cpc	r19, r29
 63e:	a8 f3       	brcs	.-22     	; 0x62a <TIMER_delay+0xd2>
		overflowcounter++;
	}
	overflowcounter = 0;
	
	// timer stop
	TCCR0 = 0x00;
 640:	13 be       	out	0x33, r1	; 51
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	bf 90       	pop	r11
 650:	af 90       	pop	r10
 652:	9f 90       	pop	r9
 654:	8f 90       	pop	r8
 656:	08 95       	ret

00000658 <main>:
 */ 
#include "C:\Users\Lord\Documents\Atmel Studio\7.0\MY first project\MY first project\Application\application.h"

int main(void)
{	// initialize
	APP_init();
 658:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>

	while(1)
	{
	APP_start();	
 65c:	0e 94 69 00 	call	0xd2	; 0xd2 <APP_start>
 660:	fd cf       	rjmp	.-6      	; 0x65c <main+0x4>

00000662 <DIO_init>:
// function definitions

// DIO_init initializes the pin into input or output
void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 662:	82 34       	cpi	r24, 0x42	; 66
 664:	31 f1       	breq	.+76     	; 0x6b2 <DIO_init+0x50>
 666:	18 f4       	brcc	.+6      	; 0x66e <DIO_init+0xc>
 668:	81 34       	cpi	r24, 0x41	; 65
 66a:	39 f0       	breq	.+14     	; 0x67a <DIO_init+0x18>
 66c:	08 95       	ret
 66e:	83 34       	cpi	r24, 0x43	; 67
 670:	e1 f1       	breq	.+120    	; 0x6ea <DIO_init+0x88>
 672:	84 34       	cpi	r24, 0x44	; 68
 674:	09 f4       	brne	.+2      	; 0x678 <DIO_init+0x16>
 676:	54 c0       	rjmp	.+168    	; 0x720 <DIO_init+0xbe>
 678:	08 95       	ret
	{
		case PORT_A:
			if(direction == IN)
 67a:	41 11       	cpse	r20, r1
 67c:	0c c0       	rjmp	.+24     	; 0x696 <DIO_init+0x34>
			{
				CLEAR_BIT(DDRA,pinNumber); // input
 67e:	2a b3       	in	r18, 0x1a	; 26
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_init+0x28>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_init+0x24>
 68e:	80 95       	com	r24
 690:	82 23       	and	r24, r18
 692:	8a bb       	out	0x1a, r24	; 26
 694:	08 95       	ret
			}
			else if(direction == OUT)
 696:	41 30       	cpi	r20, 0x01	; 1
 698:	09 f0       	breq	.+2      	; 0x69c <DIO_init+0x3a>
 69a:	5c c0       	rjmp	.+184    	; 0x754 <DIO_init+0xf2>
			{
				SET_BIT(DDRA,pinNumber); // output
 69c:	2a b3       	in	r18, 0x1a	; 26
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_init+0x46>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_init+0x42>
 6ac:	82 2b       	or	r24, r18
 6ae:	8a bb       	out	0x1a, r24	; 26
 6b0:	08 95       	ret
			{
				// ERROR handling
			}
			break;
		case PORT_B:
			if(direction == IN)
 6b2:	41 11       	cpse	r20, r1
 6b4:	0c c0       	rjmp	.+24     	; 0x6ce <DIO_init+0x6c>
			{
				CLEAR_BIT(DDRB,pinNumber); // input
 6b6:	27 b3       	in	r18, 0x17	; 23
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_init+0x60>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	6a 95       	dec	r22
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_init+0x5c>
 6c6:	80 95       	com	r24
 6c8:	82 23       	and	r24, r18
 6ca:	87 bb       	out	0x17, r24	; 23
 6cc:	08 95       	ret
			}
			else if(direction == OUT)
 6ce:	41 30       	cpi	r20, 0x01	; 1
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <DIO_init+0x72>
 6d2:	40 c0       	rjmp	.+128    	; 0x754 <DIO_init+0xf2>
			{
				SET_BIT(DDRB,pinNumber); // output
 6d4:	27 b3       	in	r18, 0x17	; 23
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_init+0x7e>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_init+0x7a>
 6e4:	82 2b       	or	r24, r18
 6e6:	87 bb       	out	0x17, r24	; 23
 6e8:	08 95       	ret
			{
				// ERROR handling
			}
			break;
		case PORT_C:
			if(direction == IN)
 6ea:	41 11       	cpse	r20, r1
 6ec:	0c c0       	rjmp	.+24     	; 0x706 <DIO_init+0xa4>
			{
				CLEAR_BIT(DDRC,pinNumber); // input
 6ee:	24 b3       	in	r18, 0x14	; 20
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_init+0x98>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	6a 95       	dec	r22
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_init+0x94>
 6fe:	80 95       	com	r24
 700:	82 23       	and	r24, r18
 702:	84 bb       	out	0x14, r24	; 20
 704:	08 95       	ret
			}
			else if(direction == OUT)
 706:	41 30       	cpi	r20, 0x01	; 1
 708:	29 f5       	brne	.+74     	; 0x754 <DIO_init+0xf2>
			{
				SET_BIT(DDRC,pinNumber); // output
 70a:	24 b3       	in	r18, 0x14	; 20
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_init+0xb4>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	6a 95       	dec	r22
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_init+0xb0>
 71a:	82 2b       	or	r24, r18
 71c:	84 bb       	out	0x14, r24	; 20
 71e:	08 95       	ret
			{
				// ERROR handling
			}
			break;
		case PORT_D:
			if(direction == IN)
 720:	41 11       	cpse	r20, r1
 722:	0c c0       	rjmp	.+24     	; 0x73c <DIO_init+0xda>
			{
				CLEAR_BIT(DDRD,pinNumber); // input
 724:	21 b3       	in	r18, 0x11	; 17
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_init+0xce>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_init+0xca>
 734:	80 95       	com	r24
 736:	82 23       	and	r24, r18
 738:	81 bb       	out	0x11, r24	; 17
 73a:	08 95       	ret
			}
			else if(direction == OUT)
 73c:	41 30       	cpi	r20, 0x01	; 1
 73e:	51 f4       	brne	.+20     	; 0x754 <DIO_init+0xf2>
			{
				SET_BIT(DDRD,pinNumber); // output
 740:	21 b3       	in	r18, 0x11	; 17
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_init+0xea>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_init+0xe6>
 750:	82 2b       	or	r24, r18
 752:	81 bb       	out	0x11, r24	; 17
 754:	08 95       	ret

00000756 <DIO_write>:
	
}
// DIO_write initializes the pin into high (5v) or low (0v)
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber)
 756:	82 34       	cpi	r24, 0x42	; 66
 758:	31 f1       	breq	.+76     	; 0x7a6 <DIO_write+0x50>
 75a:	18 f4       	brcc	.+6      	; 0x762 <DIO_write+0xc>
 75c:	81 34       	cpi	r24, 0x41	; 65
 75e:	39 f0       	breq	.+14     	; 0x76e <DIO_write+0x18>
 760:	08 95       	ret
 762:	83 34       	cpi	r24, 0x43	; 67
 764:	e1 f1       	breq	.+120    	; 0x7de <DIO_write+0x88>
 766:	84 34       	cpi	r24, 0x44	; 68
 768:	09 f4       	brne	.+2      	; 0x76c <DIO_write+0x16>
 76a:	54 c0       	rjmp	.+168    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 76c:	08 95       	ret
	{
		case PORT_A:
			if(value == LOW)
 76e:	41 11       	cpse	r20, r1
 770:	0c c0       	rjmp	.+24     	; 0x78a <DIO_write+0x34>
			{
			CLEAR_BIT(PORTA,pinNumber); // write 0
 772:	2b b3       	in	r18, 0x1b	; 27
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_write+0x28>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	6a 95       	dec	r22
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_write+0x24>
 782:	80 95       	com	r24
 784:	82 23       	and	r24, r18
 786:	8b bb       	out	0x1b, r24	; 27
 788:	08 95       	ret
			}
			else if(value == HIGH)
 78a:	41 30       	cpi	r20, 0x01	; 1
 78c:	09 f0       	breq	.+2      	; 0x790 <DIO_write+0x3a>
 78e:	5c c0       	rjmp	.+184    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			{
			SET_BIT(PORTA,pinNumber); // write 1
 790:	2b b3       	in	r18, 0x1b	; 27
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_write+0x46>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_write+0x42>
 7a0:	82 2b       	or	r24, r18
 7a2:	8b bb       	out	0x1b, r24	; 27
 7a4:	08 95       	ret
			{
			// ERROR handling
			}
			break;
		case PORT_B:
			if(value == LOW)
 7a6:	41 11       	cpse	r20, r1
 7a8:	0c c0       	rjmp	.+24     	; 0x7c2 <DIO_write+0x6c>
			{
			CLEAR_BIT(PORTB,pinNumber); // write 0
 7aa:	28 b3       	in	r18, 0x18	; 24
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_write+0x60>
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	6a 95       	dec	r22
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_write+0x5c>
 7ba:	80 95       	com	r24
 7bc:	82 23       	and	r24, r18
 7be:	88 bb       	out	0x18, r24	; 24
 7c0:	08 95       	ret
			}
			else if(value == HIGH)
 7c2:	41 30       	cpi	r20, 0x01	; 1
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <DIO_write+0x72>
 7c6:	40 c0       	rjmp	.+128    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			{
			SET_BIT(PORTB,pinNumber); // write 1
 7c8:	28 b3       	in	r18, 0x18	; 24
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_write+0x7e>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	6a 95       	dec	r22
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_write+0x7a>
 7d8:	82 2b       	or	r24, r18
 7da:	88 bb       	out	0x18, r24	; 24
 7dc:	08 95       	ret
			{
			// ERROR handling
			}
			break;
		case PORT_C:
			if(value == LOW)
 7de:	41 11       	cpse	r20, r1
 7e0:	0c c0       	rjmp	.+24     	; 0x7fa <DIO_write+0xa4>
			{
				CLEAR_BIT(PORTC,pinNumber); // write 0
 7e2:	25 b3       	in	r18, 0x15	; 21
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_write+0x98>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	6a 95       	dec	r22
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_write+0x94>
 7f2:	80 95       	com	r24
 7f4:	82 23       	and	r24, r18
 7f6:	85 bb       	out	0x15, r24	; 21
 7f8:	08 95       	ret
			}
			else if(value == HIGH)
 7fa:	41 30       	cpi	r20, 0x01	; 1
 7fc:	29 f5       	brne	.+74     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			{
				SET_BIT(PORTC,pinNumber); // write 1
 7fe:	25 b3       	in	r18, 0x15	; 21
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	6a 95       	dec	r22
 80c:	e2 f7       	brpl	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80e:	82 2b       	or	r24, r18
 810:	85 bb       	out	0x15, r24	; 21
 812:	08 95       	ret
			{
				// ERROR handling
			}
			break;
		case PORT_D:
			if(value == LOW)
 814:	41 11       	cpse	r20, r1
 816:	0c c0       	rjmp	.+24     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			{
				CLEAR_BIT(PORTD,pinNumber); // write 0
 818:	22 b3       	in	r18, 0x12	; 18
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	80 95       	com	r24
 82a:	82 23       	and	r24, r18
 82c:	82 bb       	out	0x12, r24	; 18
 82e:	08 95       	ret
			}
			else if(value == HIGH)
 830:	41 30       	cpi	r20, 0x01	; 1
 832:	51 f4       	brne	.+20     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			{
				SET_BIT(PORTD,pinNumber); // write 1
 834:	22 b3       	in	r18, 0x12	; 18
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	6a 95       	dec	r22
 842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	82 2b       	or	r24, r18
 846:	82 bb       	out	0x12, r24	; 18
 848:	08 95       	ret

0000084a <DIO_toggle>:
	}
}
// DIO_toggle switches the state of the pin( high -> low and low -> high)
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch(portNumber){
 84a:	82 34       	cpi	r24, 0x42	; 66
 84c:	a1 f0       	breq	.+40     	; 0x876 <__stack+0x17>
 84e:	18 f4       	brcc	.+6      	; 0x856 <DIO_toggle+0xc>
 850:	81 34       	cpi	r24, 0x41	; 65
 852:	31 f0       	breq	.+12     	; 0x860 <__stack+0x1>
 854:	08 95       	ret
 856:	83 34       	cpi	r24, 0x43	; 67
 858:	c9 f0       	breq	.+50     	; 0x88c <__stack+0x2d>
 85a:	84 34       	cpi	r24, 0x44	; 68
 85c:	11 f1       	breq	.+68     	; 0x8a2 <__stack+0x43>
 85e:	08 95       	ret
		case PORT_A:
			TOGGLE_BIT(PORTA,pinNumber);
 860:	2b b3       	in	r18, 0x1b	; 27
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	6a 95       	dec	r22
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	82 27       	eor	r24, r18
 872:	8b bb       	out	0x1b, r24	; 27
			break;
 874:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB,pinNumber);
 876:	28 b3       	in	r18, 0x18	; 24
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	6a 95       	dec	r22
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	82 27       	eor	r24, r18
 888:	88 bb       	out	0x18, r24	; 24
			break;
 88a:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC,pinNumber);
 88c:	25 b3       	in	r18, 0x15	; 21
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	6a 95       	dec	r22
 89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
 89c:	82 27       	eor	r24, r18
 89e:	85 bb       	out	0x15, r24	; 21
			break;
 8a0:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD,pinNumber);
 8a2:	22 b3       	in	r18, 0x12	; 18
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
 8aa:	88 0f       	add	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	6a 95       	dec	r22
 8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
 8b2:	82 27       	eor	r24, r18
 8b4:	82 bb       	out	0x12, r24	; 18
 8b6:	08 95       	ret

000008b8 <__subsf3>:
 8b8:	50 58       	subi	r21, 0x80	; 128

000008ba <__addsf3>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	aa 27       	eor	r26, r26
 8be:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3x>
 8c2:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_round>
 8c6:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscA>
 8ca:	38 f0       	brcs	.+14     	; 0x8da <__addsf3+0x20>
 8cc:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_pscB>
 8d0:	20 f0       	brcs	.+8      	; 0x8da <__addsf3+0x20>
 8d2:	39 f4       	brne	.+14     	; 0x8e2 <__addsf3+0x28>
 8d4:	9f 3f       	cpi	r25, 0xFF	; 255
 8d6:	19 f4       	brne	.+6      	; 0x8de <__addsf3+0x24>
 8d8:	26 f4       	brtc	.+8      	; 0x8e2 <__addsf3+0x28>
 8da:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_nan>
 8de:	0e f4       	brtc	.+2      	; 0x8e2 <__addsf3+0x28>
 8e0:	e0 95       	com	r30
 8e2:	e7 fb       	bst	r30, 7
 8e4:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_inf>

000008e8 <__addsf3x>:
 8e8:	e9 2f       	mov	r30, r25
 8ea:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_split3>
 8ee:	58 f3       	brcs	.-42     	; 0x8c6 <__addsf3+0xc>
 8f0:	ba 17       	cp	r27, r26
 8f2:	62 07       	cpc	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	95 07       	cpc	r25, r21
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__addsf3x+0x1c>
 8fc:	79 f4       	brne	.+30     	; 0x91c <__addsf3x+0x34>
 8fe:	a6 f5       	brtc	.+104    	; 0x968 <__addsf3x+0x80>
 900:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_zero>
 904:	0e f4       	brtc	.+2      	; 0x908 <__addsf3x+0x20>
 906:	e0 95       	com	r30
 908:	0b 2e       	mov	r0, r27
 90a:	ba 2f       	mov	r27, r26
 90c:	a0 2d       	mov	r26, r0
 90e:	0b 01       	movw	r0, r22
 910:	b9 01       	movw	r22, r18
 912:	90 01       	movw	r18, r0
 914:	0c 01       	movw	r0, r24
 916:	ca 01       	movw	r24, r20
 918:	a0 01       	movw	r20, r0
 91a:	11 24       	eor	r1, r1
 91c:	ff 27       	eor	r31, r31
 91e:	59 1b       	sub	r21, r25
 920:	99 f0       	breq	.+38     	; 0x948 <__addsf3x+0x60>
 922:	59 3f       	cpi	r21, 0xF9	; 249
 924:	50 f4       	brcc	.+20     	; 0x93a <__addsf3x+0x52>
 926:	50 3e       	cpi	r21, 0xE0	; 224
 928:	68 f1       	brcs	.+90     	; 0x984 <__addsf3x+0x9c>
 92a:	1a 16       	cp	r1, r26
 92c:	f0 40       	sbci	r31, 0x00	; 0
 92e:	a2 2f       	mov	r26, r18
 930:	23 2f       	mov	r18, r19
 932:	34 2f       	mov	r19, r20
 934:	44 27       	eor	r20, r20
 936:	58 5f       	subi	r21, 0xF8	; 248
 938:	f3 cf       	rjmp	.-26     	; 0x920 <__addsf3x+0x38>
 93a:	46 95       	lsr	r20
 93c:	37 95       	ror	r19
 93e:	27 95       	ror	r18
 940:	a7 95       	ror	r26
 942:	f0 40       	sbci	r31, 0x00	; 0
 944:	53 95       	inc	r21
 946:	c9 f7       	brne	.-14     	; 0x93a <__addsf3x+0x52>
 948:	7e f4       	brtc	.+30     	; 0x968 <__addsf3x+0x80>
 94a:	1f 16       	cp	r1, r31
 94c:	ba 0b       	sbc	r27, r26
 94e:	62 0b       	sbc	r22, r18
 950:	73 0b       	sbc	r23, r19
 952:	84 0b       	sbc	r24, r20
 954:	ba f0       	brmi	.+46     	; 0x984 <__addsf3x+0x9c>
 956:	91 50       	subi	r25, 0x01	; 1
 958:	a1 f0       	breq	.+40     	; 0x982 <__addsf3x+0x9a>
 95a:	ff 0f       	add	r31, r31
 95c:	bb 1f       	adc	r27, r27
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	c2 f7       	brpl	.-16     	; 0x956 <__addsf3x+0x6e>
 966:	0e c0       	rjmp	.+28     	; 0x984 <__addsf3x+0x9c>
 968:	ba 0f       	add	r27, r26
 96a:	62 1f       	adc	r22, r18
 96c:	73 1f       	adc	r23, r19
 96e:	84 1f       	adc	r24, r20
 970:	48 f4       	brcc	.+18     	; 0x984 <__addsf3x+0x9c>
 972:	87 95       	ror	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b7 95       	ror	r27
 97a:	f7 95       	ror	r31
 97c:	9e 3f       	cpi	r25, 0xFE	; 254
 97e:	08 f0       	brcs	.+2      	; 0x982 <__addsf3x+0x9a>
 980:	b0 cf       	rjmp	.-160    	; 0x8e2 <__addsf3+0x28>
 982:	93 95       	inc	r25
 984:	88 0f       	add	r24, r24
 986:	08 f0       	brcs	.+2      	; 0x98a <__addsf3x+0xa2>
 988:	99 27       	eor	r25, r25
 98a:	ee 0f       	add	r30, r30
 98c:	97 95       	ror	r25
 98e:	87 95       	ror	r24
 990:	08 95       	ret

00000992 <ceil>:
 992:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_trunc>
 996:	90 f0       	brcs	.+36     	; 0x9bc <ceil+0x2a>
 998:	9f 37       	cpi	r25, 0x7F	; 127
 99a:	48 f4       	brcc	.+18     	; 0x9ae <ceil+0x1c>
 99c:	91 11       	cpse	r25, r1
 99e:	16 f4       	brtc	.+4      	; 0x9a4 <ceil+0x12>
 9a0:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	80 e8       	ldi	r24, 0x80	; 128
 9aa:	9f e3       	ldi	r25, 0x3F	; 63
 9ac:	08 95       	ret
 9ae:	26 f0       	brts	.+8      	; 0x9b8 <ceil+0x26>
 9b0:	1b 16       	cp	r1, r27
 9b2:	61 1d       	adc	r22, r1
 9b4:	71 1d       	adc	r23, r1
 9b6:	81 1d       	adc	r24, r1
 9b8:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_mintl>
 9bc:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__fp_mpack>

000009c0 <__cmpsf2>:
 9c0:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_cmp>
 9c4:	08 f4       	brcc	.+2      	; 0x9c8 <__cmpsf2+0x8>
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	08 95       	ret

000009ca <__divsf3>:
 9ca:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divsf3x>
 9ce:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_round>
 9d2:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_pscB>
 9d6:	58 f0       	brcs	.+22     	; 0x9ee <__divsf3+0x24>
 9d8:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscA>
 9dc:	40 f0       	brcs	.+16     	; 0x9ee <__divsf3+0x24>
 9de:	29 f4       	brne	.+10     	; 0x9ea <__divsf3+0x20>
 9e0:	5f 3f       	cpi	r21, 0xFF	; 255
 9e2:	29 f0       	breq	.+10     	; 0x9ee <__divsf3+0x24>
 9e4:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_inf>
 9e8:	51 11       	cpse	r21, r1
 9ea:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 9ee:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_nan>

000009f2 <__divsf3x>:
 9f2:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_split3>
 9f6:	68 f3       	brcs	.-38     	; 0x9d2 <__divsf3+0x8>

000009f8 <__divsf3_pse>:
 9f8:	99 23       	and	r25, r25
 9fa:	b1 f3       	breq	.-20     	; 0x9e8 <__divsf3+0x1e>
 9fc:	55 23       	and	r21, r21
 9fe:	91 f3       	breq	.-28     	; 0x9e4 <__divsf3+0x1a>
 a00:	95 1b       	sub	r25, r21
 a02:	55 0b       	sbc	r21, r21
 a04:	bb 27       	eor	r27, r27
 a06:	aa 27       	eor	r26, r26
 a08:	62 17       	cp	r22, r18
 a0a:	73 07       	cpc	r23, r19
 a0c:	84 07       	cpc	r24, r20
 a0e:	38 f0       	brcs	.+14     	; 0xa1e <__divsf3_pse+0x26>
 a10:	9f 5f       	subi	r25, 0xFF	; 255
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	22 0f       	add	r18, r18
 a16:	33 1f       	adc	r19, r19
 a18:	44 1f       	adc	r20, r20
 a1a:	aa 1f       	adc	r26, r26
 a1c:	a9 f3       	breq	.-22     	; 0xa08 <__divsf3_pse+0x10>
 a1e:	35 d0       	rcall	.+106    	; 0xa8a <__divsf3_pse+0x92>
 a20:	0e 2e       	mov	r0, r30
 a22:	3a f0       	brmi	.+14     	; 0xa32 <__divsf3_pse+0x3a>
 a24:	e0 e8       	ldi	r30, 0x80	; 128
 a26:	32 d0       	rcall	.+100    	; 0xa8c <__divsf3_pse+0x94>
 a28:	91 50       	subi	r25, 0x01	; 1
 a2a:	50 40       	sbci	r21, 0x00	; 0
 a2c:	e6 95       	lsr	r30
 a2e:	00 1c       	adc	r0, r0
 a30:	ca f7       	brpl	.-14     	; 0xa24 <__divsf3_pse+0x2c>
 a32:	2b d0       	rcall	.+86     	; 0xa8a <__divsf3_pse+0x92>
 a34:	fe 2f       	mov	r31, r30
 a36:	29 d0       	rcall	.+82     	; 0xa8a <__divsf3_pse+0x92>
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	bb 1f       	adc	r27, r27
 a40:	26 17       	cp	r18, r22
 a42:	37 07       	cpc	r19, r23
 a44:	48 07       	cpc	r20, r24
 a46:	ab 07       	cpc	r26, r27
 a48:	b0 e8       	ldi	r27, 0x80	; 128
 a4a:	09 f0       	breq	.+2      	; 0xa4e <__divsf3_pse+0x56>
 a4c:	bb 0b       	sbc	r27, r27
 a4e:	80 2d       	mov	r24, r0
 a50:	bf 01       	movw	r22, r30
 a52:	ff 27       	eor	r31, r31
 a54:	93 58       	subi	r25, 0x83	; 131
 a56:	5f 4f       	sbci	r21, 0xFF	; 255
 a58:	3a f0       	brmi	.+14     	; 0xa68 <__divsf3_pse+0x70>
 a5a:	9e 3f       	cpi	r25, 0xFE	; 254
 a5c:	51 05       	cpc	r21, r1
 a5e:	78 f0       	brcs	.+30     	; 0xa7e <__divsf3_pse+0x86>
 a60:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__fp_inf>
 a64:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_szero>
 a68:	5f 3f       	cpi	r21, 0xFF	; 255
 a6a:	e4 f3       	brlt	.-8      	; 0xa64 <__divsf3_pse+0x6c>
 a6c:	98 3e       	cpi	r25, 0xE8	; 232
 a6e:	d4 f3       	brlt	.-12     	; 0xa64 <__divsf3_pse+0x6c>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b7 95       	ror	r27
 a78:	f7 95       	ror	r31
 a7a:	9f 5f       	subi	r25, 0xFF	; 255
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__divsf3_pse+0x78>
 a7e:	88 0f       	add	r24, r24
 a80:	91 1d       	adc	r25, r1
 a82:	96 95       	lsr	r25
 a84:	87 95       	ror	r24
 a86:	97 f9       	bld	r25, 7
 a88:	08 95       	ret
 a8a:	e1 e0       	ldi	r30, 0x01	; 1
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	bb 1f       	adc	r27, r27
 a94:	62 17       	cp	r22, r18
 a96:	73 07       	cpc	r23, r19
 a98:	84 07       	cpc	r24, r20
 a9a:	ba 07       	cpc	r27, r26
 a9c:	20 f0       	brcs	.+8      	; 0xaa6 <__divsf3_pse+0xae>
 a9e:	62 1b       	sub	r22, r18
 aa0:	73 0b       	sbc	r23, r19
 aa2:	84 0b       	sbc	r24, r20
 aa4:	ba 0b       	sbc	r27, r26
 aa6:	ee 1f       	adc	r30, r30
 aa8:	88 f7       	brcc	.-30     	; 0xa8c <__divsf3_pse+0x94>
 aaa:	e0 95       	com	r30
 aac:	08 95       	ret

00000aae <__fixunssfsi>:
 aae:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_splitA>
 ab2:	88 f0       	brcs	.+34     	; 0xad6 <__fixunssfsi+0x28>
 ab4:	9f 57       	subi	r25, 0x7F	; 127
 ab6:	98 f0       	brcs	.+38     	; 0xade <__fixunssfsi+0x30>
 ab8:	b9 2f       	mov	r27, r25
 aba:	99 27       	eor	r25, r25
 abc:	b7 51       	subi	r27, 0x17	; 23
 abe:	b0 f0       	brcs	.+44     	; 0xaec <__fixunssfsi+0x3e>
 ac0:	e1 f0       	breq	.+56     	; 0xafa <__fixunssfsi+0x4c>
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	1a f0       	brmi	.+6      	; 0xad2 <__fixunssfsi+0x24>
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__fixunssfsi+0x14>
 ad0:	14 c0       	rjmp	.+40     	; 0xafa <__fixunssfsi+0x4c>
 ad2:	b1 30       	cpi	r27, 0x01	; 1
 ad4:	91 f0       	breq	.+36     	; 0xafa <__fixunssfsi+0x4c>
 ad6:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_zero>
 ada:	b1 e0       	ldi	r27, 0x01	; 1
 adc:	08 95       	ret
 ade:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_zero>
 ae2:	67 2f       	mov	r22, r23
 ae4:	78 2f       	mov	r23, r24
 ae6:	88 27       	eor	r24, r24
 ae8:	b8 5f       	subi	r27, 0xF8	; 248
 aea:	39 f0       	breq	.+14     	; 0xafa <__fixunssfsi+0x4c>
 aec:	b9 3f       	cpi	r27, 0xF9	; 249
 aee:	cc f3       	brlt	.-14     	; 0xae2 <__fixunssfsi+0x34>
 af0:	86 95       	lsr	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b3 95       	inc	r27
 af8:	d9 f7       	brne	.-10     	; 0xaf0 <__fixunssfsi+0x42>
 afa:	3e f4       	brtc	.+14     	; 0xb0a <__fixunssfsi+0x5c>
 afc:	90 95       	com	r25
 afe:	80 95       	com	r24
 b00:	70 95       	com	r23
 b02:	61 95       	neg	r22
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	08 95       	ret

00000b0c <__floatunsisf>:
 b0c:	e8 94       	clt
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__floatsisf+0x12>

00000b10 <__floatsisf>:
 b10:	97 fb       	bst	r25, 7
 b12:	3e f4       	brtc	.+14     	; 0xb22 <__floatsisf+0x12>
 b14:	90 95       	com	r25
 b16:	80 95       	com	r24
 b18:	70 95       	com	r23
 b1a:	61 95       	neg	r22
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	99 23       	and	r25, r25
 b24:	a9 f0       	breq	.+42     	; 0xb50 <__floatsisf+0x40>
 b26:	f9 2f       	mov	r31, r25
 b28:	96 e9       	ldi	r25, 0x96	; 150
 b2a:	bb 27       	eor	r27, r27
 b2c:	93 95       	inc	r25
 b2e:	f6 95       	lsr	r31
 b30:	87 95       	ror	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f1 11       	cpse	r31, r1
 b3a:	f8 cf       	rjmp	.-16     	; 0xb2c <__floatsisf+0x1c>
 b3c:	fa f4       	brpl	.+62     	; 0xb7c <__floatsisf+0x6c>
 b3e:	bb 0f       	add	r27, r27
 b40:	11 f4       	brne	.+4      	; 0xb46 <__floatsisf+0x36>
 b42:	60 ff       	sbrs	r22, 0
 b44:	1b c0       	rjmp	.+54     	; 0xb7c <__floatsisf+0x6c>
 b46:	6f 5f       	subi	r22, 0xFF	; 255
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	16 c0       	rjmp	.+44     	; 0xb7c <__floatsisf+0x6c>
 b50:	88 23       	and	r24, r24
 b52:	11 f0       	breq	.+4      	; 0xb58 <__floatsisf+0x48>
 b54:	96 e9       	ldi	r25, 0x96	; 150
 b56:	11 c0       	rjmp	.+34     	; 0xb7a <__floatsisf+0x6a>
 b58:	77 23       	and	r23, r23
 b5a:	21 f0       	breq	.+8      	; 0xb64 <__floatsisf+0x54>
 b5c:	9e e8       	ldi	r25, 0x8E	; 142
 b5e:	87 2f       	mov	r24, r23
 b60:	76 2f       	mov	r23, r22
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <__floatsisf+0x5e>
 b64:	66 23       	and	r22, r22
 b66:	71 f0       	breq	.+28     	; 0xb84 <__floatsisf+0x74>
 b68:	96 e8       	ldi	r25, 0x86	; 134
 b6a:	86 2f       	mov	r24, r22
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	2a f0       	brmi	.+10     	; 0xb7c <__floatsisf+0x6c>
 b72:	9a 95       	dec	r25
 b74:	66 0f       	add	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	da f7       	brpl	.-10     	; 0xb72 <__floatsisf+0x62>
 b7c:	88 0f       	add	r24, r24
 b7e:	96 95       	lsr	r25
 b80:	87 95       	ror	r24
 b82:	97 f9       	bld	r25, 7
 b84:	08 95       	ret

00000b86 <__fp_cmp>:
 b86:	99 0f       	add	r25, r25
 b88:	00 08       	sbc	r0, r0
 b8a:	55 0f       	add	r21, r21
 b8c:	aa 0b       	sbc	r26, r26
 b8e:	e0 e8       	ldi	r30, 0x80	; 128
 b90:	fe ef       	ldi	r31, 0xFE	; 254
 b92:	16 16       	cp	r1, r22
 b94:	17 06       	cpc	r1, r23
 b96:	e8 07       	cpc	r30, r24
 b98:	f9 07       	cpc	r31, r25
 b9a:	c0 f0       	brcs	.+48     	; 0xbcc <__fp_cmp+0x46>
 b9c:	12 16       	cp	r1, r18
 b9e:	13 06       	cpc	r1, r19
 ba0:	e4 07       	cpc	r30, r20
 ba2:	f5 07       	cpc	r31, r21
 ba4:	98 f0       	brcs	.+38     	; 0xbcc <__fp_cmp+0x46>
 ba6:	62 1b       	sub	r22, r18
 ba8:	73 0b       	sbc	r23, r19
 baa:	84 0b       	sbc	r24, r20
 bac:	95 0b       	sbc	r25, r21
 bae:	39 f4       	brne	.+14     	; 0xbbe <__fp_cmp+0x38>
 bb0:	0a 26       	eor	r0, r26
 bb2:	61 f0       	breq	.+24     	; 0xbcc <__fp_cmp+0x46>
 bb4:	23 2b       	or	r18, r19
 bb6:	24 2b       	or	r18, r20
 bb8:	25 2b       	or	r18, r21
 bba:	21 f4       	brne	.+8      	; 0xbc4 <__fp_cmp+0x3e>
 bbc:	08 95       	ret
 bbe:	0a 26       	eor	r0, r26
 bc0:	09 f4       	brne	.+2      	; 0xbc4 <__fp_cmp+0x3e>
 bc2:	a1 40       	sbci	r26, 0x01	; 1
 bc4:	a6 95       	lsr	r26
 bc6:	8f ef       	ldi	r24, 0xFF	; 255
 bc8:	81 1d       	adc	r24, r1
 bca:	81 1d       	adc	r24, r1
 bcc:	08 95       	ret

00000bce <__fp_inf>:
 bce:	97 f9       	bld	r25, 7
 bd0:	9f 67       	ori	r25, 0x7F	; 127
 bd2:	80 e8       	ldi	r24, 0x80	; 128
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	08 95       	ret

00000bda <__fp_mintl>:
 bda:	88 23       	and	r24, r24
 bdc:	71 f4       	brne	.+28     	; 0xbfa <__fp_mintl+0x20>
 bde:	77 23       	and	r23, r23
 be0:	21 f0       	breq	.+8      	; 0xbea <__fp_mintl+0x10>
 be2:	98 50       	subi	r25, 0x08	; 8
 be4:	87 2b       	or	r24, r23
 be6:	76 2f       	mov	r23, r22
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <__fp_mintl+0x1e>
 bea:	66 23       	and	r22, r22
 bec:	11 f4       	brne	.+4      	; 0xbf2 <__fp_mintl+0x18>
 bee:	99 27       	eor	r25, r25
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <__fp_mintl+0x32>
 bf2:	90 51       	subi	r25, 0x10	; 16
 bf4:	86 2b       	or	r24, r22
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	2a f0       	brmi	.+10     	; 0xc06 <__fp_mintl+0x2c>
 bfc:	9a 95       	dec	r25
 bfe:	66 0f       	add	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	da f7       	brpl	.-10     	; 0xbfc <__fp_mintl+0x22>
 c06:	88 0f       	add	r24, r24
 c08:	96 95       	lsr	r25
 c0a:	87 95       	ror	r24
 c0c:	97 f9       	bld	r25, 7
 c0e:	08 95       	ret

00000c10 <__fp_mpack>:
 c10:	9f 3f       	cpi	r25, 0xFF	; 255
 c12:	31 f0       	breq	.+12     	; 0xc20 <__fp_mpack_finite+0xc>

00000c14 <__fp_mpack_finite>:
 c14:	91 50       	subi	r25, 0x01	; 1
 c16:	20 f4       	brcc	.+8      	; 0xc20 <__fp_mpack_finite+0xc>
 c18:	87 95       	ror	r24
 c1a:	77 95       	ror	r23
 c1c:	67 95       	ror	r22
 c1e:	b7 95       	ror	r27
 c20:	88 0f       	add	r24, r24
 c22:	91 1d       	adc	r25, r1
 c24:	96 95       	lsr	r25
 c26:	87 95       	ror	r24
 c28:	97 f9       	bld	r25, 7
 c2a:	08 95       	ret

00000c2c <__fp_nan>:
 c2c:	9f ef       	ldi	r25, 0xFF	; 255
 c2e:	80 ec       	ldi	r24, 0xC0	; 192
 c30:	08 95       	ret

00000c32 <__fp_pscA>:
 c32:	00 24       	eor	r0, r0
 c34:	0a 94       	dec	r0
 c36:	16 16       	cp	r1, r22
 c38:	17 06       	cpc	r1, r23
 c3a:	18 06       	cpc	r1, r24
 c3c:	09 06       	cpc	r0, r25
 c3e:	08 95       	ret

00000c40 <__fp_pscB>:
 c40:	00 24       	eor	r0, r0
 c42:	0a 94       	dec	r0
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	14 06       	cpc	r1, r20
 c4a:	05 06       	cpc	r0, r21
 c4c:	08 95       	ret

00000c4e <__fp_round>:
 c4e:	09 2e       	mov	r0, r25
 c50:	03 94       	inc	r0
 c52:	00 0c       	add	r0, r0
 c54:	11 f4       	brne	.+4      	; 0xc5a <__fp_round+0xc>
 c56:	88 23       	and	r24, r24
 c58:	52 f0       	brmi	.+20     	; 0xc6e <__fp_round+0x20>
 c5a:	bb 0f       	add	r27, r27
 c5c:	40 f4       	brcc	.+16     	; 0xc6e <__fp_round+0x20>
 c5e:	bf 2b       	or	r27, r31
 c60:	11 f4       	brne	.+4      	; 0xc66 <__fp_round+0x18>
 c62:	60 ff       	sbrs	r22, 0
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <__fp_round+0x20>
 c66:	6f 5f       	subi	r22, 0xFF	; 255
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	8f 4f       	sbci	r24, 0xFF	; 255
 c6c:	9f 4f       	sbci	r25, 0xFF	; 255
 c6e:	08 95       	ret

00000c70 <__fp_split3>:
 c70:	57 fd       	sbrc	r21, 7
 c72:	90 58       	subi	r25, 0x80	; 128
 c74:	44 0f       	add	r20, r20
 c76:	55 1f       	adc	r21, r21
 c78:	59 f0       	breq	.+22     	; 0xc90 <__fp_splitA+0x10>
 c7a:	5f 3f       	cpi	r21, 0xFF	; 255
 c7c:	71 f0       	breq	.+28     	; 0xc9a <__fp_splitA+0x1a>
 c7e:	47 95       	ror	r20

00000c80 <__fp_splitA>:
 c80:	88 0f       	add	r24, r24
 c82:	97 fb       	bst	r25, 7
 c84:	99 1f       	adc	r25, r25
 c86:	61 f0       	breq	.+24     	; 0xca0 <__fp_splitA+0x20>
 c88:	9f 3f       	cpi	r25, 0xFF	; 255
 c8a:	79 f0       	breq	.+30     	; 0xcaa <__fp_splitA+0x2a>
 c8c:	87 95       	ror	r24
 c8e:	08 95       	ret
 c90:	12 16       	cp	r1, r18
 c92:	13 06       	cpc	r1, r19
 c94:	14 06       	cpc	r1, r20
 c96:	55 1f       	adc	r21, r21
 c98:	f2 cf       	rjmp	.-28     	; 0xc7e <__fp_split3+0xe>
 c9a:	46 95       	lsr	r20
 c9c:	f1 df       	rcall	.-30     	; 0xc80 <__fp_splitA>
 c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <__fp_splitA+0x30>
 ca0:	16 16       	cp	r1, r22
 ca2:	17 06       	cpc	r1, r23
 ca4:	18 06       	cpc	r1, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	f1 cf       	rjmp	.-30     	; 0xc8c <__fp_splitA+0xc>
 caa:	86 95       	lsr	r24
 cac:	71 05       	cpc	r23, r1
 cae:	61 05       	cpc	r22, r1
 cb0:	08 94       	sec
 cb2:	08 95       	ret

00000cb4 <__fp_trunc>:
 cb4:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_splitA>
 cb8:	a0 f0       	brcs	.+40     	; 0xce2 <__fp_trunc+0x2e>
 cba:	be e7       	ldi	r27, 0x7E	; 126
 cbc:	b9 17       	cp	r27, r25
 cbe:	88 f4       	brcc	.+34     	; 0xce2 <__fp_trunc+0x2e>
 cc0:	bb 27       	eor	r27, r27
 cc2:	9f 38       	cpi	r25, 0x8F	; 143
 cc4:	60 f4       	brcc	.+24     	; 0xcde <__fp_trunc+0x2a>
 cc6:	16 16       	cp	r1, r22
 cc8:	b1 1d       	adc	r27, r1
 cca:	67 2f       	mov	r22, r23
 ccc:	78 2f       	mov	r23, r24
 cce:	88 27       	eor	r24, r24
 cd0:	98 5f       	subi	r25, 0xF8	; 248
 cd2:	f7 cf       	rjmp	.-18     	; 0xcc2 <__fp_trunc+0xe>
 cd4:	86 95       	lsr	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	b1 1d       	adc	r27, r1
 cdc:	93 95       	inc	r25
 cde:	96 39       	cpi	r25, 0x96	; 150
 ce0:	c8 f3       	brcs	.-14     	; 0xcd4 <__fp_trunc+0x20>
 ce2:	08 95       	ret

00000ce4 <__fp_zero>:
 ce4:	e8 94       	clt

00000ce6 <__fp_szero>:
 ce6:	bb 27       	eor	r27, r27
 ce8:	66 27       	eor	r22, r22
 cea:	77 27       	eor	r23, r23
 cec:	cb 01       	movw	r24, r22
 cee:	97 f9       	bld	r25, 7
 cf0:	08 95       	ret

00000cf2 <_exit>:
 cf2:	f8 94       	cli

00000cf4 <__stop_program>:
 cf4:	ff cf       	rjmp	.-2      	; 0xcf4 <__stop_program>
